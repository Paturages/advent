const input = `../.. => .../.../###
#./.. => .../.#./.##
##/.. => .#./.#./...
.#/#. => ###/..#/.##
##/#. => ..#/###/#..
##/## => ..#/#../##.
.../.../... => .##./##../..##/.##.
#../.../... => ##../.#.#/..#./###.
.#./.../... => ##.#/#.#./.#../..##
##./.../... => ...#/##.#/.#.#/#.##
#.#/.../... => ..#./#.../###./...#
###/.../... => #.#./...#/#.#./###.
.#./#../... => ...#/###./.##./...#
##./#../... => ###./####/###./..##
..#/#../... => ####/#.../####/#.##
#.#/#../... => #.##/.#.#/##.#/###.
.##/#../... => ..../.#../.#.#/.##.
###/#../... => ..##/##.#/..##/.###
.../.#./... => ###./..##/.#../#..#
#../.#./... => ###./.#../#.../#...
.#./.#./... => ####/..#./.##./##..
##./.#./... => .#../#.#./###./###.
#.#/.#./... => ####/.##./##.#/.###
###/.#./... => #.#./..##/.##./#...
.#./##./... => ####/#.##/####/..#.
##./##./... => #.../.#../..../#.##
..#/##./... => #..#/..##/#.../####
#.#/##./... => ###./##../..##/#...
.##/##./... => ..../#.##/.###/#.#.
###/##./... => .#../##.#/.#../##..
.../#.#/... => ...#/.###/.##./###.
#../#.#/... => ###./##../#.#./.##.
.#./#.#/... => ..#./.#../.##./.###
##./#.#/... => #.../#.../.##./.#..
#.#/#.#/... => .##./..##/.###/#...
###/#.#/... => ..../####/###./....
.../###/... => #.##/.#.#/#.##/...#
#../###/... => #.../#.#./.#../#...
.#./###/... => ...#/###./.##./.#.#
##./###/... => ##../####/###./#.##
#.#/###/... => ...#/###./##.#/.#.#
###/###/... => #.#./##.#/..../.##.
..#/.../#.. => ...#/..#./..#./##..
#.#/.../#.. => ..#./#.##/#.#./#.##
.##/.../#.. => ####/####/#.##/#...
###/.../#.. => ###./..#./###./.#..
.##/#../#.. => ...#/####/..../###.
###/#../#.. => ##.#/.#../##.#/...#
..#/.#./#.. => ###./#.##/...#/##..
#.#/.#./#.. => #.../..#./..#./#.##
.##/.#./#.. => ##.#/...#/#.#./.###
###/.#./#.. => .#../..##/#.#./..#.
.##/##./#.. => #.../#.#./.###/#...
###/##./#.. => .##./.#../.#.#/.###
#../..#/#.. => ###./#..#/#.../##.#
.#./..#/#.. => #.#./#..#/#.../.###
##./..#/#.. => ...#/..##/..#./####
#.#/..#/#.. => ####/#..#/###./#.#.
.##/..#/#.. => ..#./..#./..../.##.
###/..#/#.. => ...#/#..#/#.#./....
#../#.#/#.. => ..##/.#.#/.###/.##.
.#./#.#/#.. => ..../##.#/..##/#..#
##./#.#/#.. => ..#./..##/#..#/#..#
..#/#.#/#.. => ..#./#.../#.#./##..
#.#/#.#/#.. => ##.#/..##/.###/...#
.##/#.#/#.. => #.##/.##./##../#.#.
###/#.#/#.. => ####/##.#/#..#/#.#.
#../.##/#.. => ..##/#.#./####/####
.#./.##/#.. => ##../###./####/....
##./.##/#.. => .###/####/..#./...#
#.#/.##/#.. => ###./##../##../#.##
.##/.##/#.. => ##../.###/####/.#.#
###/.##/#.. => ##../.##./#.../..#.
#../###/#.. => #.#./.#.#/#.../....
.#./###/#.. => .##./##../...#/##..
##./###/#.. => #.#./..../.##./##.#
..#/###/#.. => ...#/...#/##.#/...#
#.#/###/#.. => .##./.###/#..#/.##.
.##/###/#.. => ####/..##/#.../####
###/###/#.. => ...#/####/..#./.###
.#./#.#/.#. => .##./#.##/.##./.###
##./#.#/.#. => ..##/.#../##.#/###.
#.#/#.#/.#. => .#../..../.#.#/#...
###/#.#/.#. => ###./..#./..../#.#.
.#./###/.#. => #..#/.#../#.../..##
##./###/.#. => .##./...#/.###/....
#.#/###/.#. => .###/###./#.#./.#.#
###/###/.#. => #.##/.#.#/#.#./.##.
#.#/..#/##. => .###/..../####/####
###/..#/##. => #.##/###./..##/.##.
.##/#.#/##. => ..../...#/#..#/..##
###/#.#/##. => #.##/.#../.#../....
#.#/.##/##. => ..##/..##/#.../#..#
###/.##/##. => ##.#/#.../#.##/..##
.##/###/##. => ...#/..#./##../#.##
###/###/##. => #.##/#..#/..#./...#
#.#/.../#.# => ##.#/.#../##.#/.##.
###/.../#.# => #.#./..##/.#.#/##.#
###/#../#.# => ..#./#.##/...#/.###
#.#/.#./#.# => .###/#.##/#..#/#.##
###/.#./#.# => ..../..#./###./..#.
###/##./#.# => .###/##../..##/####
#.#/#.#/#.# => #.#./####/.#../.##.
###/#.#/#.# => ####/..../..##/#...
#.#/###/#.# => #.../.##./#.../...#
###/###/#.# => .#.#/...#/..../..##
###/#.#/### => .#../#.##/#.##/.###
###/###/### => #.../.#.#/#..#/#.##`;

// (not a 6 AM one)
/*
12 31 43 24
34 42 21 13

123 741 987 369
456 852 654 258
789 963 321 147
*/
// No one's got time to do matrix operations!
const getRotations = {
  2: pattern => {
    const grid = pattern.replace(/\//g, '').split('');
    const order90 = [3,1,4,2];
    const order180 = [4,3,2,1];
    const order270 = [2,4,1,3];
    const grid90 = [];
    const grid180 = [];
    const grid270 = [];
    for (let i = 0; i < 4; i++) {
      grid90[i] = grid[order90[i] - 1];
      grid180[i] = grid[order180[i] - 1];
      grid270[i] = grid[order270[i] - 1];
    }
    return [
      pattern,
      `${grid90.slice(0, 2).join('')}/${grid90.slice(2).join('')}`,
      `${grid180.slice(0, 2).join('')}/${grid180.slice(2).join('')}`,
      `${grid270.slice(0, 2).join('')}/${grid270.slice(2).join('')}`
    ];
  },
  3: pattern => {
    const grid = pattern.replace(/\//g, '').split('');
    const order90 = "741852963".split('');
    const order180 = "987654321".split('');
    const order270 = "369258147".split('');
    const grid90 = [];
    const grid180 = [];
    const grid270 = [];
    for (let i = 0; i < 9; i++) {
      grid90[i] = grid[order90[i] - 1];
      grid180[i] = grid[order180[i] - 1];
      grid270[i] = grid[order270[i] - 1];
    }
    return [
      pattern,
      `${grid90.slice(0, 3).join('')}/${grid90.slice(3, 6).join('')}/${grid90.slice(6).join('')}`,
      `${grid180.slice(0, 3).join('')}/${grid180.slice(3, 6).join('')}/${grid180.slice(6).join('')}`,
      `${grid270.slice(0, 3).join('')}/${grid270.slice(3, 6).join('')}/${grid270.slice(6).join('')}`
    ];
  },
};
((rules) => {
  let program = '.#./..#/###'.split('/').map(x => x.split(''));
  const N_1 = 5;
  const N_2 = 18;
  // for (let n = 0; n < N_1; n++) {
  for (let n = 0; n < N_2; n++) {
    const chunkSize = program.length % 2 ? 3 : 2;
    const chunks = [];
    // Building the chunks
    for (let y = 0; y < program.length; y += chunkSize) {
      const chunkRow = [];
      for (let x = 0; x < program.length; x += chunkSize)
        chunkRow.push(program.slice(y, y + chunkSize).map(row => row.slice(x, x + chunkSize)));
      chunks.push(chunkRow);
    }
    // Transforming and reassembling the chunks
    program = chunks.reduce((result, chunkRow) => {
      const row = chunkRow.map(chunk => rules[chunk.map(x => x.join('')).join('/')]);
      const programRows = [];
      for (let i = 0; i < row[0].length; i++) {
        programRows.push(row.reduce((arr, chunk) => arr.concat(chunk[i]), []));
      }
      result.push(...programRows);
      return result;
    }, []);
  }
  return program.reduce((sum, row) => sum + row.reduce((sum2, cell) => sum2 + (cell == '#' ? 1 : 0), 0), 0);
})(
  input.split('\n').reduce((map, x) => {
    const [from, to] = x.split(' => ');
    const rotations =
      getRotations[from.split('/')[0].length](from)
      // Flip the pattern
      .concat(getRotations[from.split('/')[0].length](
        from.split('/').map(x => x.split('').reverse().join('')).join('/')
      ));
    rotations.forEach(rotation => map[rotation] = to.split('/').map(x => x.split('')))
    return map;
  }, {})
);
